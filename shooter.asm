ca65 V2.15 - Git 78dcb61
Main file   : playground.s
Current file: playground.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.15 - Git 78dcb61
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.15 - Git 78dcb61"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	on
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.dbg		file, "playground.c", 3605, 1460502199
000000r 1               	.dbg		file, "/usr/share/cc65/include/c64.h", 6729, 1458248198
000000r 1               	.dbg		file, "/usr/share/cc65/include/_vic2.h", 10835, 1458248198
000000r 1               	.dbg		file, "/usr/share/cc65/include/_sid.h", 3626, 1458248198
000000r 1               	.dbg		file, "/usr/share/cc65/include/_6526.h", 3962, 1458248198
000000r 1               	.dbg		file, "playground.h", 1934, 1460502169
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdbool.h", 2506, 1458248198
000000r 1               	.export		_playgroundInitialize
000000r 1               	.export		_playgroundLoad
000000r 1               	.export		_playgroundScroll
000000r 1               	.export		_playgroundWriteLine
000000r 1               	.export		_playgroundWriteTile
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; signed short __near__ playgroundInitialize (signed short)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_playgroundInitialize: near
000000r 1               
000000r 1               	.dbg	func, "playgroundInitialize", "00", extern, "_playgroundInitialize"
000000r 1               	.dbg	sym, "level", "00", auto, 0
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; short playgroundInitialize( short level) {
000000r 1               ;
000000r 1               	.dbg	line, "playground.c", 49
000000r 1  20 rr rr     	jsr     pushax
000003r 1               ;
000003r 1               ; return true;
000003r 1               ;
000003r 1               	.dbg	line, "playground.c", 50
000003r 1  A2 00        	ldx     #$00
000005r 1  A9 01        	lda     #$01
000007r 1               ;
000007r 1               ; }
000007r 1               ;
000007r 1               	.dbg	line, "playground.c", 51
000007r 1  4C rr rr     	jmp     incsp2
00000Ar 1               	.dbg	line
00000Ar 1               
00000Ar 1               .endproc
00000Ar 1               
00000Ar 1               ; ---------------------------------------------------------------
00000Ar 1               ; signed short __near__ playgroundLoad (signed short)
00000Ar 1               ; ---------------------------------------------------------------
00000Ar 1               
00000Ar 1               .segment	"CODE"
00000Ar 1               
00000Ar 1               .proc	_playgroundLoad: near
00000Ar 1               
00000Ar 1               	.dbg	func, "playgroundLoad", "00", extern, "_playgroundLoad"
00000Ar 1               	.dbg	sym, "level", "00", auto, 0
00000Ar 1               
00000Ar 1               .segment	"CODE"
00000Ar 1               
00000Ar 1               ;
00000Ar 1               ; short playgroundLoad( short level) {
00000Ar 1               ;
00000Ar 1               	.dbg	line, "playground.c", 38
00000Ar 1  20 rr rr     	jsr     pushax
00000Dr 1               ;
00000Dr 1               ; return true;
00000Dr 1               ;
00000Dr 1               	.dbg	line, "playground.c", 39
00000Dr 1  A2 00        	ldx     #$00
00000Fr 1  A9 01        	lda     #$01
000011r 1               ;
000011r 1               ; }
000011r 1               ;
000011r 1               	.dbg	line, "playground.c", 40
000011r 1  4C rr rr     	jmp     incsp2
000014r 1               	.dbg	line
000014r 1               
000014r 1               .endproc
000014r 1               
000014r 1               ; ---------------------------------------------------------------
000014r 1               ; void __near__ playgroundScroll (void)
000014r 1               ; ---------------------------------------------------------------
000014r 1               
000014r 1               .segment	"CODE"
000014r 1               
000014r 1               .proc	_playgroundScroll: near
000014r 1               
000014r 1               	.dbg	func, "playgroundScroll", "00", extern, "_playgroundScroll"
000014r 1               	.dbg	sym, "cur_ram", "00", auto, -2
000014r 1               
000014r 1               .segment	"CODE"
000014r 1               
000014r 1               ;
000014r 1               ; for( cur_ram = 0xe400; cur_ram < (unsigned char *)0xe428; ++cur_ram) {
000014r 1               ;
000014r 1               	.dbg	line, "playground.c", 75
000014r 1  20 rr rr     	jsr     decsp2
000017r 1  A0 00        	ldy     #$00
000019r 1  98           	tya
00001Ar 1  91 rr        	sta     (sp),y
00001Cr 1  A9 E4        	lda     #$E4
00001Er 1  C8           	iny
00001Fr 1  91 rr        	sta     (sp),y
000021r 1  A0 01        L000A:	ldy     #$01
000023r 1  B1 rr        	lda     (sp),y
000025r 1  C9 E4        	cmp     #$E4
000027r 1  D0 05        	bne     L0011
000029r 1  88           	dey
00002Ar 1  B1 rr        	lda     (sp),y
00002Cr 1  C9 28        	cmp     #$28
00002Er 1  B0 19        L0011:	bcs     L000B
000030r 1               ;
000030r 1               ; *cur_ram = 47;
000030r 1               ;
000030r 1               	.dbg	line, "playground.c", 76
000030r 1  A0 01        	ldy     #$01
000032r 1  B1 rr        	lda     (sp),y
000034r 1  85 rr        	sta     ptr1+1
000036r 1  88           	dey
000037r 1  B1 rr        	lda     (sp),y
000039r 1  85 rr        	sta     ptr1
00003Br 1  A9 2F        	lda     #$2F
00003Dr 1  91 rr        	sta     (ptr1),y
00003Fr 1               ;
00003Fr 1               ; for( cur_ram = 0xe400; cur_ram < (unsigned char *)0xe428; ++cur_ram) {
00003Fr 1               ;
00003Fr 1               	.dbg	line, "playground.c", 75
00003Fr 1  A2 00        	ldx     #$00
000041r 1  A9 01        	lda     #$01
000043r 1  20 rr rr     	jsr     addeq0sp
000046r 1  4C rr rr     	jmp     L000A
000049r 1               ;
000049r 1               ; for( cur_ram = 0xd800; cur_ram < (unsigned char *)0xd828; ++cur_ram) {
000049r 1               ;
000049r 1               	.dbg	line, "playground.c", 79
000049r 1  A0 00        L000B:	ldy     #$00
00004Br 1  98           	tya
00004Cr 1  91 rr        	sta     (sp),y
00004Er 1  A9 D8        	lda     #$D8
000050r 1  C8           	iny
000051r 1  91 rr        	sta     (sp),y
000053r 1  A0 01        L0015:	ldy     #$01
000055r 1  B1 rr        	lda     (sp),y
000057r 1  C9 D8        	cmp     #$D8
000059r 1  D0 05        	bne     L001C
00005Br 1  88           	dey
00005Cr 1  B1 rr        	lda     (sp),y
00005Er 1  C9 28        	cmp     #$28
000060r 1  B0 19        L001C:	bcs     L0016
000062r 1               ;
000062r 1               ; *cur_ram = 2;
000062r 1               ;
000062r 1               	.dbg	line, "playground.c", 80
000062r 1  A0 01        	ldy     #$01
000064r 1  B1 rr        	lda     (sp),y
000066r 1  85 rr        	sta     ptr1+1
000068r 1  88           	dey
000069r 1  B1 rr        	lda     (sp),y
00006Br 1  85 rr        	sta     ptr1
00006Dr 1  A9 02        	lda     #$02
00006Fr 1  91 rr        	sta     (ptr1),y
000071r 1               ;
000071r 1               ; for( cur_ram = 0xd800; cur_ram < (unsigned char *)0xd828; ++cur_ram) {
000071r 1               ;
000071r 1               	.dbg	line, "playground.c", 79
000071r 1  A2 00        	ldx     #$00
000073r 1  A9 01        	lda     #$01
000075r 1  20 rr rr     	jsr     addeq0sp
000078r 1  4C rr rr     	jmp     L0015
00007Br 1               ;
00007Br 1               ; }
00007Br 1               ;
00007Br 1               	.dbg	line, "playground.c", 82
00007Br 1  4C rr rr     L0016:	jmp     incsp2
00007Er 1               	.dbg	line
00007Er 1               
00007Er 1               .endproc
00007Er 1               
00007Er 1               ; ---------------------------------------------------------------
00007Er 1               ; void __near__ playgroundWriteLine (__near__ unsigned char *, int, __near__ unsigned char *, __near__ unsigned char *)
00007Er 1               ; ---------------------------------------------------------------
00007Er 1               
00007Er 1               .segment	"CODE"
00007Er 1               
00007Er 1               .proc	_playgroundWriteLine: near
00007Er 1               
00007Er 1               	.dbg	func, "playgroundWriteLine", "00", extern, "_playgroundWriteLine"
00007Er 1               	.dbg	sym, "playgroundTiles", "00", auto, 6
00007Er 1               	.dbg	sym, "linenr", "00", auto, 4
00007Er 1               	.dbg	sym, "availableTiles", "00", auto, 2
00007Er 1               	.dbg	sym, "videoram", "00", auto, 0
00007Er 1               	.dbg	sym, "tileLine", "00", auto, -2
00007Er 1               	.dbg	sym, "currentTile", "00", auto, -4
00007Er 1               	.dbg	sym, "tileIndex", "00", auto, -6
00007Er 1               
00007Er 1               .segment	"CODE"
00007Er 1               
00007Er 1               ;
00007Er 1               ; void playgroundWriteLine(unsigned char *playgroundTiles, int linenr, unsigned char *availableTiles, unsigned char *videoram) {
00007Er 1               ;
00007Er 1               	.dbg	line, "playground.c", 92
00007Er 1  20 rr rr     	jsr     pushax
000081r 1               ;
000081r 1               ; short tileLine = linenr % TILE_HEIGHT;
000081r 1               ;
000081r 1               	.dbg	line, "playground.c", 93
000081r 1  A0 07        	ldy     #$07
000083r 1  20 rr rr     	jsr     pushwysp
000086r 1  A2 00        	ldx     #$00
000088r 1  A9 02        	lda     #$02
00008Ar 1  20 rr rr     	jsr     tosmoda0
00008Dr 1  20 rr rr     	jsr     pushax
000090r 1               ;
000090r 1               ; unsigned char *currentTile = &playgroundTiles[PLAYGROUND_WIDTH * (linenr / TILE_HEIGHT)];
000090r 1               ;
000090r 1               	.dbg	line, "playground.c", 94
000090r 1  A0 0B        	ldy     #$0B
000092r 1  20 rr rr     	jsr     pushwysp
000095r 1  A0 09        	ldy     #$09
000097r 1  B1 rr        	lda     (sp),y
000099r 1  AA           	tax
00009Ar 1  88           	dey
00009Br 1  B1 rr        	lda     (sp),y
00009Dr 1  20 rr rr     	jsr     asrax1
0000A0r 1  20 rr rr     	jsr     pushax
0000A3r 1  A9 14        	lda     #$14
0000A5r 1  20 rr rr     	jsr     tosmula0
0000A8r 1  20 rr rr     	jsr     tosaddax
0000ABr 1  20 rr rr     	jsr     pushax
0000AEr 1               ;
0000AEr 1               ; for( tileIndex = 0; tileIndex < PLAYGROUND_WIDTH; tileIndex++) {
0000AEr 1               ;
0000AEr 1               	.dbg	line, "playground.c", 97
0000AEr 1  20 rr rr     	jsr     decsp2
0000B1r 1  A0 00        	ldy     #$00
0000B3r 1  98           	tya
0000B4r 1  91 rr        	sta     (sp),y
0000B6r 1  C8           	iny
0000B7r 1  91 rr        	sta     (sp),y
0000B9r 1  A0 01        L0025:	ldy     #$01
0000BBr 1  B1 rr        	lda     (sp),y
0000BDr 1  AA           	tax
0000BEr 1  88           	dey
0000BFr 1  B1 rr        	lda     (sp),y
0000C1r 1  C9 14        	cmp     #$14
0000C3r 1  8A           	txa
0000C4r 1  E9 00        	sbc     #$00
0000C6r 1  50 02        	bvc     L002C
0000C8r 1  49 80        	eor     #$80
0000CAr 1  10 6F        L002C:	bpl     L0026
0000CCr 1               ;
0000CCr 1               ; playgroundWriteTile( availableTiles[ currentTile[ tileIndex]], tileLine, videoram);
0000CCr 1               ;
0000CCr 1               	.dbg	line, "playground.c", 98
0000CCr 1  20 rr rr     	jsr     decsp4
0000CFr 1  A0 06        	ldy     #$06
0000D1r 1  B1 rr        	lda     (sp),y
0000D3r 1  18           	clc
0000D4r 1  A0 04        	ldy     #$04
0000D6r 1  71 rr        	adc     (sp),y
0000D8r 1  85 rr        	sta     ptr1
0000DAr 1  A0 07        	ldy     #$07
0000DCr 1  B1 rr        	lda     (sp),y
0000DEr 1  A0 05        	ldy     #$05
0000E0r 1  71 rr        	adc     (sp),y
0000E2r 1  85 rr        	sta     ptr1+1
0000E4r 1  A0 00        	ldy     #$00
0000E6r 1  B1 rr        	lda     (ptr1),y
0000E8r 1  18           	clc
0000E9r 1  A0 0C        	ldy     #$0C
0000EBr 1  71 rr        	adc     (sp),y
0000EDr 1  85 rr        	sta     ptr1
0000EFr 1  A9 00        	lda     #$00
0000F1r 1  C8           	iny
0000F2r 1  71 rr        	adc     (sp),y
0000F4r 1  85 rr        	sta     ptr1+1
0000F6r 1  A0 00        	ldy     #$00
0000F8r 1  B1 rr        	lda     (ptr1),y
0000FAr 1  A0 02        	ldy     #$02
0000FCr 1  91 rr        	sta     (sp),y
0000FEr 1  C8           	iny
0000FFr 1  A9 00        	lda     #$00
000101r 1  91 rr        	sta     (sp),y
000103r 1  A0 09        	ldy     #$09
000105r 1  B1 rr        	lda     (sp),y
000107r 1  AA           	tax
000108r 1  88           	dey
000109r 1  B1 rr        	lda     (sp),y
00010Br 1  A0 00        	ldy     #$00
00010Dr 1  91 rr        	sta     (sp),y
00010Fr 1  C8           	iny
000110r 1  8A           	txa
000111r 1  91 rr        	sta     (sp),y
000113r 1  A0 0B        	ldy     #$0B
000115r 1  B1 rr        	lda     (sp),y
000117r 1  AA           	tax
000118r 1  88           	dey
000119r 1  B1 rr        	lda     (sp),y
00011Br 1  20 rr rr     	jsr     _playgroundWriteTile
00011Er 1               ;
00011Er 1               ; videoram += TILE_WIDTH;
00011Er 1               ;
00011Er 1               	.dbg	line, "playground.c", 99
00011Er 1  A0 06        	ldy     #$06
000120r 1  A2 00        	ldx     #$00
000122r 1  A9 02        	lda     #$02
000124r 1  20 rr rr     	jsr     addeqysp
000127r 1               ;
000127r 1               ; for( tileIndex = 0; tileIndex < PLAYGROUND_WIDTH; tileIndex++) {
000127r 1               ;
000127r 1               	.dbg	line, "playground.c", 97
000127r 1  A0 01        	ldy     #$01
000129r 1  B1 rr        	lda     (sp),y
00012Br 1  AA           	tax
00012Cr 1  88           	dey
00012Dr 1  B1 rr        	lda     (sp),y
00012Fr 1  18           	clc
000130r 1  69 01        	adc     #$01
000132r 1  90 01        	bcc     L002E
000134r 1  E8           	inx
000135r 1  20 rr rr     L002E:	jsr     stax0sp
000138r 1  4C rr rr     	jmp     L0025
00013Br 1               ;
00013Br 1               ; }
00013Br 1               ;
00013Br 1               	.dbg	line, "playground.c", 101
00013Br 1  A0 0E        L0026:	ldy     #$0E
00013Dr 1  4C rr rr     	jmp     addysp
000140r 1               	.dbg	line
000140r 1               
000140r 1               .endproc
000140r 1               
000140r 1               ; ---------------------------------------------------------------
000140r 1               ; void __near__ playgroundWriteTile (__near__ unsigned char *, signed short, __near__ unsigned char *)
000140r 1               ; ---------------------------------------------------------------
000140r 1               
000140r 1               .segment	"CODE"
000140r 1               
000140r 1               .proc	_playgroundWriteTile: near
000140r 1               
000140r 1               	.dbg	func, "playgroundWriteTile", "00", extern, "_playgroundWriteTile"
000140r 1               	.dbg	sym, "tile", "00", auto, 4
000140r 1               	.dbg	sym, "tileLine", "00", auto, 2
000140r 1               	.dbg	sym, "videoram", "00", auto, 0
000140r 1               	.dbg	sym, "index", "00", auto, -2
000140r 1               
000140r 1               .segment	"CODE"
000140r 1               
000140r 1               ;
000140r 1               ; void playgroundWriteTile( unsigned char *tile, short tileLine, unsigned char *videoram) {
000140r 1               ;
000140r 1               	.dbg	line, "playground.c", 111
000140r 1  20 rr rr     	jsr     pushax
000143r 1               ;
000143r 1               ; tile += tileLine * TILE_WIDTH;  /* Get the position within the tile. */
000143r 1               ;
000143r 1               	.dbg	line, "playground.c", 113
000143r 1  20 rr rr     	jsr     decsp2
000146r 1  A0 05        	ldy     #$05
000148r 1  B1 rr        	lda     (sp),y
00014Ar 1  85 rr        	sta     tmp1
00014Cr 1  88           	dey
00014Dr 1  B1 rr        	lda     (sp),y
00014Fr 1  0A           	asl     a
000150r 1  26 rr        	rol     tmp1
000152r 1  A6 rr        	ldx     tmp1
000154r 1  A0 06        	ldy     #$06
000156r 1  20 rr rr     	jsr     addeqysp
000159r 1               ;
000159r 1               ; for( index = 0; index < TILE_WIDTH; index++) {
000159r 1               ;
000159r 1               	.dbg	line, "playground.c", 115
000159r 1  A0 00        	ldy     #$00
00015Br 1  98           	tya
00015Cr 1  91 rr        	sta     (sp),y
00015Er 1  C8           	iny
00015Fr 1  91 rr        	sta     (sp),y
000161r 1  A0 01        L003A:	ldy     #$01
000163r 1  B1 rr        	lda     (sp),y
000165r 1  AA           	tax
000166r 1  88           	dey
000167r 1  B1 rr        	lda     (sp),y
000169r 1  C9 02        	cmp     #$02
00016Br 1  8A           	txa
00016Cr 1  E9 00        	sbc     #$00
00016Er 1  50 02        	bvc     L0041
000170r 1  49 80        	eor     #$80
000172r 1  10 42        L0041:	bpl     L003B
000174r 1               ;
000174r 1               ; videoram[index] = tile[index];
000174r 1               ;
000174r 1               	.dbg	line, "playground.c", 116
000174r 1  A0 02        	ldy     #$02
000176r 1  B1 rr        	lda     (sp),y
000178r 1  A0 00        	ldy     #$00
00017Ar 1  18           	clc
00017Br 1  71 rr        	adc     (sp),y
00017Dr 1  85 rr        	sta     sreg
00017Fr 1  A0 03        	ldy     #$03
000181r 1  B1 rr        	lda     (sp),y
000183r 1  A0 01        	ldy     #$01
000185r 1  71 rr        	adc     (sp),y
000187r 1  85 rr        	sta     sreg+1
000189r 1  A0 06        	ldy     #$06
00018Br 1  B1 rr        	lda     (sp),y
00018Dr 1  18           	clc
00018Er 1  A0 00        	ldy     #$00
000190r 1  71 rr        	adc     (sp),y
000192r 1  85 rr        	sta     ptr1
000194r 1  A0 07        	ldy     #$07
000196r 1  B1 rr        	lda     (sp),y
000198r 1  A0 01        	ldy     #$01
00019Ar 1  71 rr        	adc     (sp),y
00019Cr 1  85 rr        	sta     ptr1+1
00019Er 1  88           	dey
00019Fr 1  B1 rr        	lda     (ptr1),y
0001A1r 1  91 rr        	sta     (sreg),y
0001A3r 1               ;
0001A3r 1               ; for( index = 0; index < TILE_WIDTH; index++) {
0001A3r 1               ;
0001A3r 1               	.dbg	line, "playground.c", 115
0001A3r 1  C8           	iny
0001A4r 1  B1 rr        	lda     (sp),y
0001A6r 1  AA           	tax
0001A7r 1  88           	dey
0001A8r 1  B1 rr        	lda     (sp),y
0001AAr 1  18           	clc
0001ABr 1  69 01        	adc     #$01
0001ADr 1  90 01        	bcc     L0043
0001AFr 1  E8           	inx
0001B0r 1  20 rr rr     L0043:	jsr     stax0sp
0001B3r 1  4C rr rr     	jmp     L003A
0001B6r 1               ;
0001B6r 1               ; }
0001B6r 1               ;
0001B6r 1               	.dbg	line, "playground.c", 118
0001B6r 1  4C rr rr     L003B:	jmp     incsp8
0001B9r 1               	.dbg	line
0001B9r 1               
0001B9r 1               .endproc
0001B9r 1               
0001B9r 1               
